{"version":3,"file":"autosaver.min.js","sources":["../src/autosaver.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/autosaver\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport { call } from 'core/ajax';\nimport { create } from 'core/modal_factory';\nimport { get_string as getString } from 'core/str';\nimport { save, cancel, hidden } from 'core/modal_events';\nimport jQuery from 'jquery';\nimport user from 'tiny_cursive/user';\n\nexport const register = (editor) => {\n    const postOne = async (methodname, args) => {\n        try {\n            const response = await call([{\n                methodname,\n                args,\n            }])[0];\n            return response;\n        } catch (error) {\n            console.error('Error in postOne:', error);\n            throw error;\n        }\n    };\n    \n    var is_student = !(jQuery('#body').hasClass('teacher_admin'));\n    var intervention = jQuery('#body').hasClass('intervention');\n    var userid = null;\n    var host = null;\n    var courseid = null;\n    var filename = \"\";\n    var quizSubmit = jQuery('#mod_quiz-next-nav');\n    var ed = \"\";\n    var event = \"\";\n    var recourceId = 0;\n    var modulename = \"\";\n    var editorid = editor?.id;\n    let bodyid = jQuery('body').attr('class');\n    var classes = bodyid.split(' ');\n    var cmid = 0;\n    var questionid = 0;\n    let assignSubmit = jQuery('#id_submitbutton');\n    \n    assignSubmit.on('click', async function (e) {\n        e.preventDefault();\n        if (filename) {\n            let data = localStorage.getItem(filename);\n            localStorage.removeItem(filename);\n    \n            try {\n                await postOne('cursive_write_local_to_json', {\n                    key: ed.key,\n                    event: event,\n                    keyCode: ed.keyCode,\n                    resourceId: recourceId,\n                    cmid: cmid,\n                    modulename: modulename,\n                    editorid: editorid,\n                    json_data: data,\n                });\n                // Custom logic completed, re-enable default action or other logic\n                assignSubmit.off('click').click();\n            } catch (error) {\n                console.error('Error submitting data:', error);\n                // Handle the error, if needed\n            }\n        } else {\n            // No filename, proceed with any other default actions\n            assignSubmit.off('click').click();\n        }\n    });\n    \n    quizSubmit.on('click', async function (e) {\n        e.preventDefault();\n        if (filename) {\n            let data = localStorage.getItem(filename);\n            localStorage.removeItem(filename);\n    \n            try {\n                await postOne('cursive_write_local_to_json', {\n                    key: ed.key,\n                    event: event,\n                    keyCode: ed.keyCode,\n                    resourceId: recourceId,\n                    cmid: cmid,\n                    modulename: modulename,\n                    editorid: editorid,\n                    json_data: data,\n                });\n                // Custom logic completed, re-enable default action or other logic\n                quizSubmit.off('click').click();\n            } catch (error) {\n                console.error('Error submitting data:', error);\n                // Handle the error, if needed\n            }\n        } else {\n            // No filename, proceed with any other default actions\n            quizSubmit.off('click').click();\n        }\n    });\n    \n\n    const getModal = (e) => {\n        return create({\n            type: 'SAVE_CANCEL',\n            title: getString('tiny_cursive', 'tiny_cursive'),\n            body: '<textarea  class=\"form-control inputUrl\" value=\"\" id=\"inputUrl\" placeholder=\"sourceurl\"></textarea>',\n\n            removeOnClose: true,\n        })\n            .done(modal => {\n                modal.getRoot().append('<style>.close{ display: none ! important; }</style>');\n                modal.show();\n                var lastEvent = '';\n                modal.getRoot().on(save, function () {\n                    var number = document.getElementById(\"inputUrl\").value;\n                    if (number === \"\" || number === null || number === undefined) {\n                        editor.execCommand('Undo');\n                        alert(\"You cannot paste text without providing source\");\n                    } else {\n                        editor.execCommand('Paste');\n                    }\n                    let ur = e.srcElement.baseURI;\n                    let recourceId = 0;\n                    let parm = new URL(ur);\n                    let modulename = \"\";\n                    let editorid = editor?.id;\n                    let bodyid = jQuery('body').attr('class');\n                    let classes = bodyid.split(' ');\n                    let courseid = parseInt(classes.find((classname) => { return classname.startsWith('course-') }).split('-')[1]); // Getting cmid from body classlist.\n                    let cmid = parseInt(classes.find((classname) => { return classname.startsWith('cmid-') }).split('-')[1]); // Getting cmid from body classlist.\n\n\n                    if (ur.includes(\"attempt.php\") || ur.includes(\"forum\") || ur.includes(\"assign\")) { } else {\n                        return false;\n                    }\n\n                    if (!ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n                        recourceId = parm.searchParams.get('attempt');\n                    }\n\n                    if (recourceId === null) {\n                        recourceId = 0;\n                    }\n                    if (ur.includes(\"forum\")) {\n                        modulename = \"forum\";\n                    }\n                    if (ur.includes(\"assign\")) {\n                        modulename = \"assign\";\n                    }\n                    if (ur.includes(\"attempt\")) {\n                        modulename = \"quiz\";\n                    }\n                    if (cmid === null) { cmid = 0; }\n\n                    postOne('cursive_user_comments', {\n                        modulename: modulename,\n                        cmid: cmid,\n                        resourceid: recourceId,\n                        courseid: courseid,\n                        usercomment: number,\n                        timemodified: \"1121232\",\n                        editorid: editorid ? editorid : \"\"\n                    });\n                    lastEvent = 'save';\n                    modal.destroy();\n                });\n                modal.getRoot().on(cancel, function () {\n\n                    editor.execCommand('Undo');\n                    lastEvent = 'cancel';\n                });\n                modal.getRoot().on(hidden, function () {\n                    if (lastEvent != 'cancel' && lastEvent != 'save') { editor.execCommand('Undo'); }\n                });\n                return modal;\n            });\n    };\n    const sendKeyEvent = (event, ed) => {\n        let ur = ed.srcElement.baseURI;\n        let parm = new URL(ur);\n        ed = ed;\n        event = event;\n        let bodyid = jQuery('body').attr('id');\n\n        if (bodyid == 'page-mod-quiz-attempt' || bodyid == 'page-mod-quiz-summary' || bodyid == 'page-mod-assign-editsubmission' || bodyid == 'page-mod-forum-view' || bodyid == 'page-mod-forum-post') {\n            cmid = parseInt(classes.find((classname) => { return classname.startsWith('cmid-') }).split('-')[1]); // Getting cmid from body classlist.\n        }\n        \n\n\n        if (ur.includes(\"attempt.php\") || ur.includes(\"forum\") || ur.includes(\"assign\")) { } else {\n            return false;\n        }\n        if (ur.includes(\"forum\") || ur.includes(\"assign\")) {\n\n        } else {\n\n            recourceId = parm.searchParams.get('attempt');\n        }\n        if (recourceId === null) {\n\n            recourceId = 0;\n        }\n\n        if (ur.includes(\"forum\")) {\n            modulename = \"forum\";\n        }\n        if (ur.includes(\"assign\")) {\n            modulename = \"assign\";\n        }\n        if (ur.includes(\"attempt\")) {\n            modulename = \"quiz\";\n        }\n        // console.log(courseid,userid,host);\n        filename = `${userid}_${recourceId}_${cmid}_${modulename}_attempt`;\n        // console.log(filename);\n        if (modulename === 'quiz') {\n            questionid = editorid.split(':')[1].split('_')[0];\n            filename = `${userid}_${recourceId}_${cmid}_${questionid}_${modulename}_attempt`;\n            // console.log(editorid);\n        }\n        // console.log(filename,cmid,classes);\n        if (localStorage.getItem(filename)) {\n\n            let data = JSON.parse(localStorage.getItem(filename));\n            data.push({\n                resourceId: recourceId,\n                key: ed.key,\n                keyCode: ed.keyCode,\n                event: event,\n                courseId:courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        } else {\n            let data = [];\n            data.push({\n                resourceId: recourceId,\n                key: ed.key,\n                keyCode: ed.keyCode,\n                event: event,\n                courseId:courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        }\n\n        // postOne('cursive_json', {\n        //     key: ed.key,\n        //     event: event,\n        //     keyCode: ed.keyCode,\n        //     resourceId: recourceId,\n        //     cmid: cmid,\n        //     modulename: modulename,\n        //     editorid: editorid ? editorid : \"\"\n        // });\n    };\n    editor.on('keyUp', (editor) => {\n        sendKeyEvent(\"keyUp\", editor);\n    });\n    editor.on('Paste', async (e) => {\n        if (is_student && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('Redo', async (e) => {\n        if (is_student && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('keyDown', (editor) => {\n        sendKeyEvent(\"keyDown\", editor);\n    });\n    editor.on('init', () => {\n        let userdata = user.getUserId();\n        userid = userdata.userid;\n        host = userdata.host;\n        courseid = userdata.courseid;\n    });\n};\n"],"names":["editor","postOne","async","methodname","args","error","console","is_student","hasClass","intervention","userid","host","courseid","filename","quizSubmit","recourceId","modulename","editorid","id","classes","attr","split","cmid","questionid","assignSubmit","on","e","preventDefault","data","localStorage","getItem","removeItem","key","event","keyCode","resourceId","json_data","off","click","getModal","type","title","body","removeOnClose","done","modal","getRoot","append","show","lastEvent","save","number","document","getElementById","value","execCommand","alert","ur","srcElement","baseURI","parm","URL","parseInt","find","classname","startsWith","includes","searchParams","get","resourceid","usercomment","timemodified","destroy","cancel","hidden","sendKeyEvent","ed","bodyid","JSON","parse","push","courseId","unixTimestamp","Date","now","clientId","personId","setItem","stringify","userdata","user","getUserId"],"mappings":"odA6ByBA,eACfC,QAAUC,MAAOC,WAAYC,yBAEJ,cAAK,CAAC,CACzBD,WAAAA,WACAC,KAAAA,QACA,GAEN,MAAOC,aACLC,QAAQD,MAAM,oBAAqBA,OAC7BA,YAIVE,aAAe,mBAAO,SAASC,SAAS,iBACxCC,cAAe,mBAAO,SAASD,SAAS,gBACxCE,OAAS,KACTC,KAAO,KACPC,SAAW,KACXC,SAAW,GACXC,YAAa,mBAAO,sBAGpBC,WAAa,EACbC,WAAa,GACbC,SAAWjB,MAAAA,cAAAA,OAAQkB,OAEnBC,SADS,mBAAO,QAAQC,KAAK,SACZC,MAAM,KACvBC,KAAO,EACPC,WAAa,MACbC,cAAe,mBAAO,oBAE1BA,aAAaC,GAAG,SAASvB,eAAgBwB,MACrCA,EAAEC,iBACEd,SAAU,KACNe,KAAOC,aAAaC,QAAQjB,UAChCgB,aAAaE,WAAWlB,oBAGdZ,QAAQ,8BAA+B,CACzC+B,IAnBP,GAmBeA,IACRC,MAnBJ,GAoBIC,QArBP,GAqBmBA,QACZC,WAAYpB,WACZO,KAAMA,KACNN,WAAYA,WACZC,SAAUA,SACVmB,UAAWR,OAGfJ,aAAaa,IAAI,SAASC,QAC5B,MAAOjC,OACLC,QAAQD,MAAM,yBAA0BA,aAK5CmB,aAAaa,IAAI,SAASC,WAIlCxB,WAAWW,GAAG,SAASvB,eAAgBwB,MACnCA,EAAEC,iBACEd,SAAU,KACNe,KAAOC,aAAaC,QAAQjB,UAChCgB,aAAaE,WAAWlB,oBAGdZ,QAAQ,8BAA+B,CACzC+B,IAhDP,GAgDeA,IACRC,MAhDJ,GAiDIC,QAlDP,GAkDmBA,QACZC,WAAYpB,WACZO,KAAMA,KACNN,WAAYA,WACZC,SAAUA,SACVmB,UAAWR,OAGfd,WAAWuB,IAAI,SAASC,QAC1B,MAAOjC,OACLC,QAAQD,MAAM,yBAA0BA,aAK5CS,WAAWuB,IAAI,SAASC,iBAK1BC,SAAYb,IACP,yBAAO,CACVc,KAAM,cACNC,OAAO,mBAAU,eAAgB,gBACjCC,KAAM,sGAENC,eAAe,IAEdC,MAAKC,QACFA,MAAMC,UAAUC,OAAO,uDACvBF,MAAMG,WACFC,UAAY,UAChBJ,MAAMC,UAAUrB,GAAGyB,oBAAM,eACjBC,OAASC,SAASC,eAAe,YAAYC,MAClC,KAAXH,QAAAA,MAAiBA,QACjBnD,OAAOuD,YAAY,QACnBC,MAAM,mDAENxD,OAAOuD,YAAY,aAEnBE,GAAK/B,EAAEgC,WAAWC,QAClB5C,WAAa,EACb6C,KAAO,IAAIC,IAAIJ,IACfzC,WAAa,GACbC,SAAWjB,MAAAA,cAAAA,OAAQkB,GAEnBC,SADS,mBAAO,QAAQC,KAAK,SACZC,MAAM,KACvBT,SAAWkD,SAAS3C,QAAQ4C,MAAMC,WAAuBA,UAAUC,WAAW,aAAc5C,MAAM,KAAK,IACvGC,KAAOwC,SAAS3C,QAAQ4C,MAAMC,WAAuBA,UAAUC,WAAW,WAAY5C,MAAM,KAAK,SAGjGoC,GAAGS,SAAS,gBAAkBT,GAAGS,SAAS,UAAYT,GAAGS,SAAS,kBAC3D,EAGNT,GAAGS,SAAS,UAAaT,GAAGS,SAAS,YACtCnD,WAAa6C,KAAKO,aAAaC,IAAI,YAGpB,OAAfrD,aACAA,WAAa,GAEb0C,GAAGS,SAAS,WACZlD,WAAa,SAEbyC,GAAGS,SAAS,YACZlD,WAAa,UAEbyC,GAAGS,SAAS,aACZlD,WAAa,QAEJ,OAATM,OAAiBA,KAAO,GAE5BrB,QAAQ,wBAAyB,CAC7Be,WAAYA,WACZM,KAAMA,KACN+C,WAAYtD,WACZH,SAAUA,SACV0D,YAAanB,OACboB,aAAc,UACdtD,SAAUA,UAAsB,KAEpCgC,UAAY,OACZJ,MAAM2B,aAEV3B,MAAMC,UAAUrB,GAAGgD,sBAAQ,WAEvBzE,OAAOuD,YAAY,QACnBN,UAAY,YAEhBJ,MAAMC,UAAUrB,GAAGiD,sBAAQ,WACN,UAAbzB,WAAsC,QAAbA,WAAuBjD,OAAOuD,YAAY,WAEpEV,SAGb8B,aAAe,CAAC1C,MAAO2C,UACrBnB,GAAKmB,GAAGlB,WAAWC,QACnBC,KAAO,IAAIC,IAAIJ,IACnBmB,GAAKA,GACL3C,MAAQA,UACJ4C,QAAS,mBAAO,QAAQzD,KAAK,SAEnB,yBAAVyD,QAA+C,yBAAVA,QAA+C,kCAAVA,QAAwD,uBAAVA,QAA6C,uBAAVA,SAC3JvD,KAAOwC,SAAS3C,QAAQ4C,MAAMC,WAAuBA,UAAUC,WAAW,WAAY5C,MAAM,KAAK,OAKjGoC,GAAGS,SAAS,gBAAkBT,GAAGS,SAAS,UAAYT,GAAGS,SAAS,kBAC3D,KAEPT,GAAGS,SAAS,UAAYT,GAAGS,SAAS,YAIpCnD,WAAa6C,KAAKO,aAAaC,IAAI,YAEpB,OAAfrD,aAEAA,WAAa,GAGb0C,GAAGS,SAAS,WACZlD,WAAa,SAEbyC,GAAGS,SAAS,YACZlD,WAAa,UAEbyC,GAAGS,SAAS,aACZlD,WAAa,QAGjBH,mBAAcH,mBAAUK,uBAAcO,iBAAQN,uBAE3B,SAAfA,aACAO,WAAaN,SAASI,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC/CR,mBAAcH,mBAAUK,uBAAcO,iBAAQC,uBAAcP,wBAI5Da,aAAaC,QAAQjB,UAAW,KAE5Be,KAAOkD,KAAKC,MAAMlD,aAAaC,QAAQjB,WAC3Ce,KAAKoD,KAAK,CACN7C,WAAYpB,WACZiB,IAAK4C,GAAG5C,IACRE,QAAS0C,GAAG1C,QACZD,MAAOA,MACPgD,SAASrE,SACTsE,cAAeC,KAAKC,MACpBC,SAAU1E,KACV2E,SAAU5E,SAEdmB,aAAa0D,QAAQ1E,SAAUiE,KAAKU,UAAU5D,WAC3C,KACCA,KAAO,GACXA,KAAKoD,KAAK,CACN7C,WAAYpB,WACZiB,IAAK4C,GAAG5C,IACRE,QAAS0C,GAAG1C,QACZD,MAAOA,MACPgD,SAASrE,SACTsE,cAAeC,KAAKC,MACpBC,SAAU1E,KACV2E,SAAU5E,SAEdmB,aAAa0D,QAAQ1E,SAAUiE,KAAKU,UAAU5D,SAatD5B,OAAOyB,GAAG,SAAUzB,SAChB2E,aAAa,QAAS3E,WAE1BA,OAAOyB,GAAG,SAASvB,MAAAA,IACXK,YAAcE,cACd8B,SAASb,MAGjB1B,OAAOyB,GAAG,QAAQvB,MAAAA,IACVK,YAAcE,cACd8B,SAASb,MAGjB1B,OAAOyB,GAAG,WAAYzB,SAClB2E,aAAa,UAAW3E,WAE5BA,OAAOyB,GAAG,QAAQ,SACVgE,SAAWC,cAAKC,YACpBjF,OAAS+E,SAAS/E,OAClBC,KAAO8E,SAAS9E,KAChBC,SAAW6E,SAAS7E"}