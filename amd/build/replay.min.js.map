{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport { call as fetchJson } from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nexport default class Replay {\n    controllerId = '';\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = speed;\n        this.loop = loop;\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        if (controllerId) {\n\n            this.constructController(controllerId);\n        }\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData['data'];\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData['payload'];\n                    }\n                    this.startReplay();\n                } else {\n                    templates.render('tiny_cursive/no_submission').then(html => {\n                        let updatedHtml = html.replace('No Submission', \"Something Went Wrong! or File Not Found!\");\n                        $('.tiny_cursive').html(updatedHtml);\n                    });\n                }\n            })\n            .catch(error => {\n                throw new Error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n        }\n    }\n    constructController(controllerId) {\n        const controller = document.getElementById(controllerId);\n\n        if (controller) {\n            this.scrubberElement = document.createElement('input');\n            this.scrubberElement.type = 'range';\n            this.scrubberElement.id = 'timelineScrubber';\n            this.scrubberElement.min = '0';\n            this.scrubberElement.max = '100';\n            this.scrubberElement.addEventListener('input', () => {\n                const scrubberValue = this.scrubberElement.value;\n                this.skipToTime(scrubberValue);\n            });\n            controller.appendChild(this.scrubberElement);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => { throw new Error('Error loading JSON file: ' + error.message); });\n    }\n\n    // call this to make a \"start\" or \"start over\" function\n    startReplay() {\n        // clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        this.replayInProgress = true;\n        let uid = this.controllerId.split('_')[1];\n        let element = document.getElementById('rep' + uid);\n        let isactive = element.classList.contains('active');\n        if (!isactive) {\n            this.stopReplay();\n        } else {\n            this.outputElement.innerHTML = '';\n        }\n        this.replayLog();\n    }\n\n    // called by startReplay() to recursively call through keydown events\n    replayLog() {\n        let textOutput = \"\";\n        let index = 0;\n        const processEvent = () => {\n\n            if (this.replayInProgress) {\n                if (index < this.logData.length) {\n                    let event = this.logData[index++];\n                    if (event.event.toLowerCase() === 'keydown') { // can sometimes be keydown or keyDown\n                        textOutput = this.applyKey(event.key, textOutput);\n                    }\n                    this.outputElement.innerHTML = textOutput;\n                    this.setScrubberVal(index / this.logData.length * 100);\n                    this.replayTimeout = setTimeout(processEvent, 1 / this.speed * 100);\n                } else {\n                    this.replayInProgress = false;\n                    if (this.loop) {\n                        this.startReplay();\n                    }\n                }\n            }\n        };\n        processEvent();\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        // only go through certain % of log data\n        let textOutput = \"\";\n        const numElementsToProcess = Math.ceil(this.logData.length * percentage / 100);\n        for (let i = 0; i < numElementsToProcess; i++) {\n            const event = this.logData[i];\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        }\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(percentage);\n    }\n\n    // used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key, textOutput) {\n        switch (key) {\n            case \"Enter\":\n                return textOutput + \"\\n\";\n            case \"Backspace\":\n                return textOutput.slice(0, -1);\n            case \"ControlBackspace\": {\n                let lastSpace = textOutput.lastIndexOf(' ');\n                return textOutput.slice(0, lastSpace);\n            }\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\", \"ArrowLeft\", \"Meta\"]\n                    .includes(key) ? textOutput + key : textOutput;\n        }\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_templates","_jquery","_exports","constructor","elementId","filePath","speed","arguments","length","undefined","loop","controllerId","key","value","Object","defineProperty","enumerable","configurable","writable","this","replayInProgress","element","document","getElementById","Error","concat","outputElement","constructController","loadJSON","then","data","status","val","JSON","parse","logData","startReplay","templates","render","html","updatedHtml","replace","$","catch","error","message","stopReplay","clearTimeout","replayTimeout","controller","scrubberElement","createElement","type","id","min","max","addEventListener","scrubberValue","skipToTime","appendChild","setScrubberVal","String","fetchJson","methodname","args","filepath","done","response","fail","uid","split","classList","contains","innerHTML","replayLog","textOutput","index","processEvent","event","toLowerCase","applyKey","setTimeout","skipToEnd","forEach","slice","percentage","numElementsToProcess","Math","ceil","i","lastSpace","lastIndexOf","includes"],"mappings":"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"}