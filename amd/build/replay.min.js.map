{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport { call as fetchJson } from 'core/ajax';\nexport default class Replay {\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n\n        this.replayInProgress = false;\n        this.speed = speed;\n        this.loop = loop;\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        if (controllerId) {\n\n            this.constructController(controllerId);\n        }\n        this.loadJSON(filePath)\n            .then((data) => {\n                var val = JSON.parse(data.data);\n                this.logData = val;\n                // support for Cursive Recorder extension files (and outdated Curisve file formats)\n                // logData should be a list of dictionaries for this to work properly\n                if (\"data\" in this.logData) {\n                    this.logData = this.logData['data'];\n                }\n                ;\n                if (\"payload\" in this.logData) {\n                    this.logData = this.logData['payload'];\n                }\n                ;\n                this.startReplay();\n            })\n            .catch(error => {\n                throw new Error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n        }\n    }\n    constructController(controllerId) {\n        const controller = document.getElementById(controllerId);\n\n        if (controller) {\n            // this.buttonElement = document.createElement('button');\n            // this.buttonElement.id = 'playerButton';\n            // this.buttonElement.textContent = 'Play';\n            this.scrubberElement = document.createElement('input');\n            this.scrubberElement.type = 'range';\n            this.scrubberElement.id = 'timelineScrubber';\n            this.scrubberElement.min = '0';\n            this.scrubberElement.max = '100';\n            this.scrubberElement.addEventListener('input', () => {\n                const scrubberValue = this.scrubberElement.value;\n                this.skipToTime(scrubberValue);\n            });\n            controller.appendChild(this.scrubberElement);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => { throw new Error('Error loading JSON file: ' + error.message); });\n    }\n\n    // call this to make a \"start\" or \"start over\" function\n    startReplay() {\n        // clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        };\n        this.replayInProgress = true;\n        let uid = controllerId.split('_')[1];\n        let element = document.getElementById('rep' + uid);\n        let isactive = element.classList.contains('active');\n        if (!isactive) {\n            this.stopReplay();\n        } else {\n            this.outputElement.innerHTML = '';\n        }\n        this.replayLog();\n    }\n\n    // called by startReplay() to recursively call through keydown events\n    replayLog() {\n        let textOutput = \"\";\n        let index = 0;\n        const processEvent = () => {\n\n            if (this.replayInProgress) {\n                if (index < this.logData.length) {\n                    let event = this.logData[index++];\n                    if (event.event.toLowerCase() === 'keydown') { // can sometimes be keydown or keyDown\n                        textOutput = this.applyKey(event.key, textOutput);\n                    }\n                    this.outputElement.innerHTML = textOutput;\n                    this.setScrubberVal(index / this.logData.length * 100);\n                    this.replayTimeout = setTimeout(processEvent, 1 / this.speed * 100);\n                } else {\n                    this.replayInProgress = false;\n                    if (this.loop) {\n                        this.startReplay();\n                    }\n                    ;\n                }\n            }\n        };\n        processEvent();\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        // only go through certain % of log data\n        let textOutput = \"\";\n        const numElementsToProcess = Math.ceil(this.logData.length * percentage / 100);\n        for (let i = 0; i < numElementsToProcess; i++) {\n            const event = this.logData[i];\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        }\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(percentage);\n    }\n\n    // used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key, textOutput) {\n        switch (key) {\n            case \"Enter\":\n                return textOutput + \"\\n\";\n            case \"Backspace\":\n                return textOutput.slice(0, -1);\n            case \"ControlBackspace\":\n                let lastSpace = textOutput.lastIndexOf(' ');\n                return textOutput.slice(0, lastSpace);\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\", \"ArrowLeft\"].includes(key) ? textOutput + key : textOutput;\n        }\n    }\n}\n"],"names":["_exports","default","constructor","elementId","filePath","speed","arguments","length","undefined","loop","controllerId","this","replayInProgress","element","document","getElementById","Error","concat","outputElement","constructController","loadJSON","then","data","val","JSON","parse","logData","startReplay","catch","error","message","stopReplay","clearTimeout","replayTimeout","controller","scrubberElement","createElement","type","id","min","max","addEventListener","scrubberValue","value","skipToTime","appendChild","setScrubberVal","String","fetchJson","methodname","args","filepath","done","response","fail","uid","split","classList","contains","innerHTML","replayLog","textOutput","index","processEvent","event","toLowerCase","applyKey","key","setTimeout","skipToEnd","forEach","slice","percentage","numElementsToProcess","Math","ceil","i","lastSpace","lastIndexOf","includes"],"mappings":"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"}