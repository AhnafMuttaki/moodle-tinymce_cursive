{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nexport default class Replay {\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n      \n        this.replayInProgress = false;\n        this.speed = speed;\n        this.loop = loop;\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        if (controllerId) {\n           \n            this.constructController(controllerId);\n        }\n        this.loadJSON(filePath)\n            .then((data) => {\n                var val=JSON.parse(data.data);\n                this.logData = val;\n                // support for Cursive Recorder extension files (and outdated Curisve file formats)\n                // logData should be a list of dictionaries for this to work properly\n                if (\"data\" in this.logData) {\n                    this.logData = this.logData['data'];\n                }\n                ;\n                if (\"payload\" in this.logData) {\n                    this.logData = this.logData['payload'];\n                }\n                ;\n                this.startReplay();\n            })\n            .catch(error => {\n                throw new Error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n        }\n    }\n    constructController(controllerId) {\n        const controller = document.getElementById(controllerId);\n        \n        if (controller) {\n            // this.buttonElement = document.createElement('button');\n            // this.buttonElement.id = 'playerButton';\n            // this.buttonElement.textContent = 'Play';\n            this.scrubberElement = document.createElement('input');\n            this.scrubberElement.type = 'range';\n            this.scrubberElement.id = 'timelineScrubber';\n            this.scrubberElement.min = '0';\n            this.scrubberElement.max = '100';\n            this.scrubberElement.addEventListener('input', () => {\n                const scrubberValue = this.scrubberElement.value;\n                this.skipToTime(scrubberValue);\n            });\n            controller.appendChild(this.scrubberElement);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n        }\n    }\n\n    loadJSON(filePath) {\n     return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response=>{\n            return response;\n        }).fail(error =>  { throw new Error('Error loading JSON file: '+error.message); });\n    }\n\n    // call this to make a \"start\" or \"start over\" function\n    startReplay() {\n        // clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        };\n        this.replayInProgress = true;\n        this.outputElement.innerHTML = '';\n        this.replayLog();\n    }\n\n    // called by startReplay() to recursively call through keydown events\n    replayLog() {\n        let textOutput = \"\";\n        let index = 0;\n        const processEvent = () => {\n           \n            if (this.replayInProgress) {\n                if (index < this.logData.length) {\n                    let event = this.logData[index++];\n                    if (event.event.toLowerCase() === 'keydown') { // can sometimes be keydown or keyDown\n                        textOutput = this.applyKey(event.key, textOutput);\n                    }\n                    this.outputElement.innerHTML = textOutput;\n                    this.setScrubberVal(index / this.logData.length * 100);\n                    this.replayTimeout = setTimeout(processEvent, 1 / this.speed * 100);\n                } else {\n                    this.replayInProgress = false;\n                    if (this.loop) {\n                        this.startReplay();\n                    }\n                    ;\n                }\n            }\n        };\n        processEvent();\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        // only go through certain % of log data\n        let textOutput = \"\";\n        const numElementsToProcess = Math.ceil(this.logData.length * percentage / 100);\n        for (let i = 0; i < numElementsToProcess; i++) {\n            const event = this.logData[i];\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        }\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(percentage);\n    }\n\n    // used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key, textOutput) {\n        switch (key) {\n            case \"Enter\":\n                return textOutput + \"\\n\";\n            case \"Backspace\":\n                return textOutput.slice(0, -1);\n            case \"ControlBackspace\":\n                let lastSpace = textOutput.lastIndexOf(' ');\n                return textOutput.slice(0, lastSpace);\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\", \"ArrowLeft\"].includes(key) ? textOutput + key : textOutput;\n        }\n    }\n}\n"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","element","document","getElementById","Error","outputElement","constructController","loadJSON","then","data","val","JSON","parse","logData","this","startReplay","catch","error","message","stopReplay","clearTimeout","replayTimeout","controller","scrubberElement","createElement","type","id","min","max","addEventListener","scrubberValue","value","skipToTime","appendChild","setScrubberVal","String","methodname","args","filepath","done","response","fail","innerHTML","replayLog","textOutput","index","processEvent","length","event","toLowerCase","applyKey","key","setTimeout","skipToEnd","forEach","slice","percentage","numElementsToProcess","Math","ceil","i","lastSpace","lastIndexOf","includes"],"mappings":"6LAwBIA,YAAYC,UAAWC,cAAUC,6DAAQ,EAAGC,6DAAcC,yDAEjDC,kBAAmB,OACnBH,MAAQA,WACRC,KAAOA,WACNG,QAAUC,SAASC,eAAeR,eACpCM,cAGM,IAAIG,iCAA0BT,+BAF/BU,cAAgBJ,QAIrBF,mBAEKO,oBAAoBP,mBAExBQ,SAASX,UACTY,MAAMC,WACCC,IAAIC,KAAKC,MAAMH,KAAKA,WACnBI,QAAUH,IAGX,SAAUI,KAAKD,eACVA,QAAUC,KAAKD,QAAL,MAGf,YAAaC,KAAKD,eACbA,QAAUC,KAAKD,QAAL,cAGdE,iBAERC,OAAMC,cACG,IAAIb,MAAM,4BAA8Ba,MAAMC,YAIhEC,aACQL,KAAKd,mBACLoB,aAAaN,KAAKO,oBACbrB,kBAAmB,GAGhCM,oBAAoBP,oBACVuB,WAAapB,SAASC,eAAeJ,cAEvCuB,kBAIKC,gBAAkBrB,SAASsB,cAAc,cACzCD,gBAAgBE,KAAO,aACvBF,gBAAgBG,GAAK,wBACrBH,gBAAgBI,IAAM,SACtBJ,gBAAgBK,IAAM,WACtBL,gBAAgBM,iBAAiB,SAAS,WACrCC,cAAgBhB,KAAKS,gBAAgBQ,WACtCC,WAAWF,kBAEpBR,WAAWW,YAAYnB,KAAKS,kBAIpCW,eAAeH,OACPjB,KAAKS,uBACAA,gBAAgBQ,MAAQI,OAAOJ,QAI5CxB,SAASX,iBACD,cAAU,CAAC,CACXwC,WAAY,yBACZC,KAAM,CACFC,SAAU1C,aAEd,GAAG2C,MAAKC,UACDA,WACRC,MAAKxB,cAAkB,IAAIb,MAAM,4BAA4Ba,MAAMC,YAI1EH,cAEQD,KAAKd,kBACLoB,aAAaN,KAAKO,oBAEjBrB,kBAAmB,OACnBK,cAAcqC,UAAY,QAC1BC,YAITA,gBACQC,WAAa,GACbC,MAAQ,QACNC,aAAe,QAEbhC,KAAKd,oBACD6C,MAAQ/B,KAAKD,QAAQkC,OAAQ,KACzBC,MAAQlC,KAAKD,QAAQgC,SACS,YAA9BG,MAAMA,MAAMC,gBACZL,WAAa9B,KAAKoC,SAASF,MAAMG,IAAKP,kBAErCvC,cAAcqC,UAAYE,gBAC1BV,eAAeW,MAAQ/B,KAAKD,QAAQkC,OAAS,UAC7C1B,cAAgB+B,WAAWN,aAAc,EAAIhC,KAAKjB,MAAQ,eAE1DG,kBAAmB,EACpBc,KAAKhB,WACAiB,eAMrB+B,eAGJO,YACQvC,KAAKd,wBACAA,kBAAmB,OAExB4C,WAAa,QACZ/B,QAAQyC,SAAQN,QACiB,YAA9BA,MAAMA,MAAMC,gBACZL,WAAa9B,KAAKoC,SAASF,MAAMG,IAAKP,qBAGzCvC,cAAcqC,UAAYE,WAAWW,MAAM,GAAI,QAC/CrB,eAAe,KAIxBF,WAAWwB,YACH1C,KAAKd,wBACAA,kBAAmB,OAGxB4C,WAAa,SACXa,qBAAuBC,KAAKC,KAAK7C,KAAKD,QAAQkC,OAASS,WAAa,SACrE,IAAII,EAAI,EAAGA,EAAIH,qBAAsBG,IAAK,OACrCZ,MAAQlC,KAAKD,QAAQ+C,GACO,YAA9BZ,MAAMA,MAAMC,gBACZL,WAAa9B,KAAKoC,SAASF,MAAMG,IAAKP,kBAGzCvC,cAAcqC,UAAYE,WAAWW,MAAM,GAAI,QAC/CrB,eAAesB,YAIxBN,SAASC,IAAKP,mBACFO,SACC,eACMP,WAAa,SACnB,mBACMA,WAAWW,MAAM,GAAI,OAC3B,uBACGM,UAAYjB,WAAWkB,YAAY,YAChClB,WAAWW,MAAM,EAAGM,yBAEnB,CAAC,QAAS,OAAQ,MAAO,YAAa,UAAW,UAAW,aAAc,aAAaE,SAASZ,KAA0BP,WAAnBA,WAAaO"}