{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["export default class Replay {\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.replayInProgress = false;\n        this.speed = speed;\n        this.loop = loop;\n\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n\n        if (controllerId) {\n            this.constructController(controllerId);\n        }\n\n        this.loadJSON(filePath)\n            .then((data) => {\n                this.logData = this.parseLogData(data);\n                this.startReplay();\n            })\n            .catch(error => {\n                console.error('Error loading JSON file:', error.message);\n            });\n    }\n\n    // Constructs the controller UI\n    constructController(controllerId) {\n        const controller = document.getElementById(controllerId);\n        if (controller) {\n            this.scrubberElement = document.createElement('input');\n            this.scrubberElement.type = 'range';\n            this.scrubberElement.id = 'timelineScrubber';\n            this.scrubberElement.min = '0';\n            this.scrubberElement.max = '100';\n            this.scrubberElement.addEventListener('input', () => {\n                const scrubberValue = this.scrubberElement.value;\n                this.skipToTime(scrubberValue);\n            });\n            controller.appendChild(this.scrubberElement);\n        } else {\n            console.error(`Controller element with id '${controllerId}' not found`);\n        }\n    }\n\n    // Sets the scrubber value\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n        }\n    }\n\n    // Loads JSON from the provided file path\n    async loadJSON(filePath) {\n        const response = await fetch(filePath);\n        if (!response.ok) {\n            throw new Error('Failed to fetch JSON file');\n        }\n        const data = await response.json();\n        if (!data || Object.keys(data).length === 0) {\n            throw new Error('Empty JSON response');\n        }\n        return data;\n    }\n\n    // Parses the log data to handle different formats\n    parseLogData(data) {\n        if (\"data\" in data) {\n            return data['data'];\n        }\n        if (\"payload\" in data) {\n            return data['payload'];\n        }\n        return data;\n    }\n\n    // Starts or restarts the replay\n    startReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        this.replayInProgress = true;\n        this.outputElement.innerHTML = '';\n        this.replayLog();\n    }\n\n    // Processes each log event for replay\n    replayLog() {\n        let textOutput = \"\";\n        let index = 0;\n        const processEvent = () => {\n            if (this.replayInProgress) {\n                if (index < this.logData.length) {\n                    const event = this.logData[index++];\n                    if (event.event.toLowerCase() === 'keydown') {\n                        textOutput = this.applyKey(event.key, textOutput);\n                    }\n                    this.outputElement.innerHTML = textOutput;\n                    this.setScrubberVal(index / this.logData.length * 100);\n                    this.replayTimeout = setTimeout(processEvent, 1000 / this.speed);\n                } else {\n                    this.replayInProgress = false;\n                    if (this.loop) {\n                        this.startReplay();\n                    }\n                }\n            }\n        };\n        processEvent();\n    }\n\n    // Skips to the end of the replay\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Skips to a specific time in the replay\n    skipToTime(percentage) {\n        percentage = Math.min(Math.max(percentage, 0), 100);\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        const numElementsToProcess = Math.ceil(this.logData.length * percentage / 100);\n        for (let i = 0; i < numElementsToProcess; i++) {\n            const event = this.logData[i];\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        }\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(percentage);\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n        }\n    }\n\n    // Applies a key event to the text output\n    applyKey(key, textOutput) {\n        switch (key) {\n            case \"Enter\":\n                return textOutput + \"\\n\";\n            case \"Backspace\":\n                return textOutput.slice(0, -1);\n            case \"ControlBackspace\":\n                const lastSpace = textOutput.lastIndexOf(' ');\n                return textOutput.slice(0, lastSpace);\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\", \"ArrowLeft\"].includes(key) ? textOutput + key : textOutput;\n        }\n    }\n}\n"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","element","document","getElementById","Error","outputElement","constructController","loadJSON","then","data","logData","this","parseLogData","startReplay","catch","error","console","message","controller","scrubberElement","createElement","type","id","min","max","addEventListener","scrubberValue","value","skipToTime","appendChild","setScrubberVal","String","response","fetch","ok","json","Object","keys","length","clearTimeout","replayTimeout","innerHTML","replayLog","textOutput","index","processEvent","event","toLowerCase","applyKey","key","setTimeout","skipToEnd","forEach","slice","percentage","Math","numElementsToProcess","ceil","i","stopReplay","lastSpace","lastIndexOf","includes"],"mappings":"2KACIA,YAAYC,UAAWC,cAAUC,6DAAQ,EAAGC,6DAAcC,yDACjDC,kBAAmB,OACnBH,MAAQA,WACRC,KAAOA,WAENG,QAAUC,SAASC,eAAeR,eACpCM,cAGM,IAAIG,iCAA0BT,+BAF/BU,cAAgBJ,QAKrBF,mBACKO,oBAAoBP,mBAGxBQ,SAASX,UACTY,MAAMC,YACEC,QAAUC,KAAKC,aAAaH,WAC5BI,iBAERC,OAAMC,QACHC,QAAQD,MAAM,2BAA4BA,MAAME,YAK5DX,oBAAoBP,oBACVmB,WAAahB,SAASC,eAAeJ,cACvCmB,iBACKC,gBAAkBjB,SAASkB,cAAc,cACzCD,gBAAgBE,KAAO,aACvBF,gBAAgBG,GAAK,wBACrBH,gBAAgBI,IAAM,SACtBJ,gBAAgBK,IAAM,WACtBL,gBAAgBM,iBAAiB,SAAS,WACrCC,cAAgBf,KAAKQ,gBAAgBQ,WACtCC,WAAWF,kBAEpBR,WAAWW,YAAYlB,KAAKQ,kBAE5BH,QAAQD,4CAAqChB,6BAKrD+B,eAAeH,OACPhB,KAAKQ,uBACAA,gBAAgBQ,MAAQI,OAAOJ,uBAK7B/B,gBACLoC,eAAiBC,MAAMrC,cACxBoC,SAASE,SACJ,IAAI9B,MAAM,mCAEdK,WAAauB,SAASG,WACvB1B,MAAqC,IAA7B2B,OAAOC,KAAK5B,MAAM6B,aACrB,IAAIlC,MAAM,8BAEbK,KAIXG,aAAaH,YACL,SAAUA,KACHA,KAAI,KAEX,YAAaA,KACNA,KAAI,QAERA,KAIXI,cACQF,KAAKX,kBACLuC,aAAa5B,KAAK6B,oBAEjBxC,kBAAmB,OACnBK,cAAcoC,UAAY,QAC1BC,YAITA,gBACQC,WAAa,GACbC,MAAQ,QACNC,aAAe,QACblC,KAAKX,oBACD4C,MAAQjC,KAAKD,QAAQ4B,OAAQ,OACvBQ,MAAQnC,KAAKD,QAAQkC,SACO,YAA9BE,MAAMA,MAAMC,gBACZJ,WAAahC,KAAKqC,SAASF,MAAMG,IAAKN,kBAErCtC,cAAcoC,UAAYE,gBAC1Bb,eAAec,MAAQjC,KAAKD,QAAQ4B,OAAS,UAC7CE,cAAgBU,WAAWL,aAAc,IAAOlC,KAAKd,iBAErDG,kBAAmB,EACpBW,KAAKb,WACAe,eAKrBgC,eAIJM,YACQxC,KAAKX,wBACAA,kBAAmB,OAExB2C,WAAa,QACZjC,QAAQ0C,SAAQN,QACiB,YAA9BA,MAAMA,MAAMC,gBACZJ,WAAahC,KAAKqC,SAASF,MAAMG,IAAKN,qBAGzCtC,cAAcoC,UAAYE,WAAWU,MAAM,GAAI,QAC/CvB,eAAe,KAIxBF,WAAW0B,YACPA,WAAaC,KAAKhC,IAAIgC,KAAK/B,IAAI8B,WAAY,GAAI,KAC3C3C,KAAKX,wBACAA,kBAAmB,OAExB2C,WAAa,SACXa,qBAAuBD,KAAKE,KAAK9C,KAAKD,QAAQ4B,OAASgB,WAAa,SACrE,IAAII,EAAI,EAAGA,EAAIF,qBAAsBE,IAAK,OACrCZ,MAAQnC,KAAKD,QAAQgD,GACO,YAA9BZ,MAAMA,MAAMC,gBACZJ,WAAahC,KAAKqC,SAASF,MAAMG,IAAKN,kBAGzCtC,cAAcoC,UAAYE,WAAWU,MAAM,GAAI,QAC/CvB,eAAewB,YAGxBK,aACQhD,KAAKX,mBACLuC,aAAa5B,KAAK6B,oBACbxC,kBAAmB,GAKhCgD,SAASC,IAAKN,mBACFM,SACC,eACMN,WAAa,SACnB,mBACMA,WAAWU,MAAM,GAAI,OAC3B,yBACKO,UAAYjB,WAAWkB,YAAY,YAClClB,WAAWU,MAAM,EAAGO,yBAEnB,CAAC,QAAS,OAAQ,MAAO,YAAa,UAAW,UAAW,aAAc,aAAaE,SAASb,KAA0BN,WAAnBA,WAAaM"}